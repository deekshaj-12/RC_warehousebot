import cv2
import numpy as np

def getContours(img):
    contours, hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for cnt in contours:
        cv2.drawContours(imgContour, cnt, -1, (255, 0, 0), 2)
        peri = cv2.arcLength(cnt, True)
        print(int(peri/2))
        dist=str(int(peri/2))
        approx = cv2.approxPolyDP(cnt, 0.0000000002 * peri, True)
        #print(len(approx))
        objCor = approx
        #print(objCor)
        x, y, w, h = cv2.boundingRect(approx)

        cv2.putText(imgContour, dist,
                    (x + (w // 2) - 10, y + (h // 2) - 10), cv2.FONT_HERSHEY_COMPLEX, 0.7,
                    (0, 0, 0), 2)
    getCentre(contours,img)

def getCentre(cnts,img):
    i = 0
    for c in cnts:

        M = cv2.moments(c)
        try:
            cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
        except ZeroDivisionError:
            print("Division by Zero!")
        ctr=(cX,cY)
        print(ctr)
        cv2.circle(imgContour, ctr, 2, (255, 255, 255), -1)
        cv2.circle(imgContour2, ctr, 12,(255, 255, 255), -1)

        cv2.putText(imgContour, str(i),
                    (cX + 10,cY + 10), cv2.FONT_HERSHEY_COMPLEX, 0.7,
                    (0, 255, 0), 2)
        i=i+1

path = 'Arena.PNG'
img = cv2.imread(path)
imgContour = img.copy()
imgContour2 = img.copy()
kernel = np.ones((5,5),np.uint8)

imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
imgBlur = cv2.GaussianBlur(imgGray, (7, 7), 1)
imgDia = cv2.dilate(imgBlur,kernel,iterations=3)
imgCanny = cv2.Canny(imgDia, 50, 50)
imgDialate = cv2.dilate(imgCanny,kernel,iterations=2)
getContours(imgDialate)
imgBlank = np.zeros_like(img)

cv2.imshow("nodes",imgContour)
cv2.imshow("new",imgContour2)

imgBlur2 = cv2.GaussianBlur(imgContour2, (7,7), 1)
imgDia2 = cv2.dilate(imgBlur2,kernel,iterations=1)
imgCanny2 = cv2.Canny(imgDia2, 70,70)
imgDialate2 = cv2.dilate(imgCanny2,kernel,iterations=1)


getContours(imgDialate2)

cv2.imshow("final",imgContour)

cv2.waitKey(0)
