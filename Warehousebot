import cv2 as cv
import sympy as sp
import math as mt
import numpy as np

def flfl(l):
    
    def mn1(l):
        x=(l[0][0]+l[1][0])/2
        y=(l[0][1]+l[1][1])/2
        return (int(x),int(y))

    def mn2(l):
        x=(l[0][2]+l[1][2])/2
        y=(l[0][3]+l[1][3])/2
        return (int(x),int(y))

    def mn3(l):
        x=(l[0][0]+l[1][2])/2
        y=(l[0][1]+l[1][3])/2
        return (int(x),int(y))

    def mn4(l):
        x=(l[0][2]+l[1][0])/2
        y=(l[0][3]+l[1][1])/2
        return (int(x),int(y))

    x1,y1=mn1(l)
    x2,y2=mn2(l)
    x3,y3=mn3(l)
    x4,y4=mn4(l)
    if mt.dist([x1,y1],[x2,y2])>mt.dist([x3,y3],[x4,y4]):
        return (x1,y1,x2,y2)
    else:
        return (x3,y3,x4,y4)

def slope(l):
    if (l[2]-l[0])==0:
        m="inf"
    else:
        m=(l[3]-l[1])/(l[2]-l[0])
    return m

def compsl(m1,m2):
    
    if str(m1)=="inf" or str(m1)=="-inf":
        a=99999
    else:
        a=mt.floor(m1)
    if str(m2)=="inf" or str(m2)=="-inf":
        b=99999
    else:
        b=mt.floor(m2)
    a=abs(a)
    b=abs(a)
    if a-1==b or a+1==b or a==b or a-2==b or a+2==b or a-3==b or a-4==b or a+4==b or a+3==b:
        return True
    else:
        return False
    
def dbw2l(l1,l2):
    d1=mt.dist([l1[0],l1[1]],[l2[0],l2[1]])
    d2=mt.dist([l1[2],l1[3]],[l2[2],l2[3]])
    d3=mt.dist([l1[0],l1[1]],[l2[2],l2[3]])
    d4=mt.dist([l1[2],l1[3]],[l2[0],l2[1]])
    return (d1,d2,d3,d4)

img = cv.imread(r"C:\Users\Chetna\OneDrive\Pictures\Saved Pictures\hd.jpg")
gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
blur = cv.blur(gray, (8,8))
ret, thresh = cv.threshold(blur, 127, 255, cv.THRESH_BINARY)

blank=np.zeros(( 800,900,3),dtype='uint8')

edges= cv.Canny (thresh, 25, 150, 3)
#cv.imshow('edges', edges)

lines = cv.HoughLinesP(edges, 0.9, np.pi/360, 28, minLineLength=10, maxLineGap=12)


l1=[]


for line in lines:
    x1,y1, x2,y2= line[0]
    
    l1.append([x1,y1,x2,y2])
    #cv.line (img, (x1,y1), (x2, y2), (0,255, 0), 2)


l2=[]

for i in range(0,len(l1)):
    for j in range(i+1,len(l1)):
        if compsl(slope(l1[i]),slope(l1[j])):
            #if lenline(l1[i]
            d1,d2,d3,d4=dbw2l(l1[i],l1[j])
            if (7<=d1<=35 and 7<=d2<=35) or (7<=d3<=35 and 7<=d4<=35) :
                l2.append([l1[i],l1[j]])
                #cv.line (img, (l1[i][0],l1[i][1]), (l1[i][2], l1[i][3]), (0,255, 0), 2)
                #print(dbw2l(l1[i],l1[j]))
#print(l2)

l3=[]
for i in l2:
    
    x1,y1,x2,y2=flfl(i)
    #print(x1,y1,x2,y2,slope(i[0]))
    l3.append([x1,y1,x2,y2])
    cv.line (img, (x1,y1), (x2, y2), (0,255, 0), 2)

nc=[]

for i in l3:
    
    m=slope(i)
    a,b=(i[0]+i[2])/2,(i[1]+i[3])/2
    if str(m)=="inf" or str(m)=="-inf":
        if mt.dist([a,b],[i[0],i[1]+10])>mt.dist([a,b],[i[0],i[1]-10]):
            nc.append([int(i[0]),int(i[1]+10)])
        else:
            nc.append([int(i[0]),int(i[1]-10)])
    elif m==0:
        if mt.dist([a,b],[i[0]+10,i[1]])>mt.dist([a,b],[i[0]-10,i[1]]):
            nc.append([int(i[0]+10),int(i[1])])
        else:
            nc.append([int(i[0]-10),int(i[1])])
        
    else:
        x, y=sp.symbols('x y')
        e1=sp.Eq(((i[0]-x)*2+(i[1]-y)*2)-100)
        e2=sp.Eq(((y-i[1])/(x-i[0]))-slope(i))
        sol=sp.solve((e1,e2),(x,y))
        if mt.dist([a,b],[sol[0][0],sol[0][1]])>mt.dist([a,b],[sol[1][0],sol[1][1]]):
            nc.append([int(sol[0][0]),int(sol[0][1])])
        else:
            nc.append([int(sol[1][0]),int(sol[1][1])])
            
    if str(m)=="inf" or str(m)=="-inf":
        if mt.dist([a,b],[i[2],i[3]+10])>mt.dist([a,b],[i[2],i[3]-10]):
            nc.append([int(i[2]),int(i[3]+10)])
        else:
            nc.append([int(i[2]),int(i[3]-10)])
    elif m==0:
        if mt.dist([a,b],[i[2]+10,i[3]])>mt.dist([a,b],[i[2]-10,i[3]]):
            nc.append([int(i[2]+10),int(i[3])])
        else:
            nc.append([int(i[2]-10),int(i[3])])
    else:
        x, y=sp.symbols('x y')
        e1=sp.Eq(((i[2]-x)*2+(i[3]-y)*2)-100)
        e2=sp.Eq(((y-i[3])/(x-i[2]))-slope(i))
        sol=sp.solve((e1,e2),(x,y))
        if mt.dist([a,b],[sol[0][0],sol[0][1]])>mt.dist([a,b],[sol[1][0],sol[1][1]]):
            nc.append([int(sol[0][0]),int(sol[0][1])])
        else:
            nc.append([int(sol[1][0]),int(sol[1][1])])

nc1=[]
for i in nc:
    for j in nc1:
        #print(i,j)
        if mt.dist(i,j)<10:
            k=nc1.index(j)
            nc1.pop(k)
            nc1.append([int((i[0]+j[0])/2), int((i[1]+j[1])/2)])
            break
    else:
        nc1.append(i)

for i in nc1:
    cv.circle(img,(i[0],i[1]),10,(0,255, 0), 2)




cv.imshow('ak',img)
k = cv.waitKey (0)
cv.destroyAllWindows ()
